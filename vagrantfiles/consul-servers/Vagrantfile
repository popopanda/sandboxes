# -*- mode: ruby -*-
# vi: set ft=ruby :

atlas_envrionment = "--atlas-environment yhuang/consul-server"
atlas_token = "--atlas-token #{ENV['ATLAS_TOKEN']}"
consul_servers = 1

Vagrant.configure(2) do |config|
  config.vm.provider "vmware_fusion" do |vmware|
    vmware.gui = false
    vmware.vmx["memsize"] = "512"
    vmware.vmx["numvcpus"] = "1"
  end

  config.vm.box = 'consul-server'
  config.vm.synced_folder "#{ENV['HOME']}", '/host-data'

  config.ssh.insert_key = false

  consul_servers.times do |n|
    name = "consul-server-0#{n+1}"
    consul_servers = "--consul-servers #{n+1}"
    node_name = "--node-name #{name}"

    config.vm.define name, primary: true do
      config.vm.provision "shell" do |s|
        s.path = "set-environment-variables.sh"
        s.args = "#{atlas_envrionment} #{atlas_token} #{consul_servers} #{node_name}"
      end
    end
  end

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL
end
